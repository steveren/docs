.. index:: replica set members; hidden
.. _replica-set-hidden-configuration:
.. _replica-set-hidden-members:

==========================
Hidden Replica Set Members
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

A hidden member maintains a copy of the :term:`primary's <primary>`
data set but is **invisible** to client applications. Hidden members
are good for workloads with different usage patterns from the other
members in the :term:`replica set`. Hidden members must always be
:ref:`priority 0 members <replica-set-secondary-only-members>` and
so **cannot become primary**. The :method:`db.isMaster()` method does not
display hidden members. Hidden members, however, **may vote** in
:ref:`elections <replica-set-elections>`.

In the following five-member replica set, all four secondary members
have copies of the primary's data set, but one of the secondary members
is hidden.

.. include:: /images/replica-set-hidden-member.rst

Considerations
--------------

The most common reason to set a node to ``hidden`` is because it is also
set to :doc:`delayed
</core/replica-set-delayed-member>`. If you only need to prevent a member from
becoming primary, configure a :doc:`priority 0 member
</core/replica-set-priority-0-member>`.

.. include:: /includes/fact-replica-set-sync-prefers-non-hidden.rst

Behavior
--------

Read Operations
~~~~~~~~~~~~~~~

Clients will not distribute reads with the appropriate :doc:`read
preference </core/read-preference>` to hidden members. As a result, these
members receive no traffic other than basic replication. Use hidden
members for dedicated tasks such as reporting and
backups. :doc:`Delayed members </core/replica-set-delayed-member>`
should be hidden.

In a sharded cluster, :program:`mongos` do not interact with hidden
members.

Voting
~~~~~~

Hidden members *may* vote in replica set elections. If you stop a
voting hidden member, ensure that the set has an active majority or the
:term:`primary` will step down.

For the purposes of backups,

- If using the MMAPv1 storage engine, you can avoid stopping a
  hidden member with the :method:`db.fsyncLock()` and
  :method:`db.fsyncUnlock()` operations to flush all writes and lock
  the :program:`mongod` instance for the duration of the backup
  operation.

- .. include:: /includes/extracts/wt-fsync-lock-compatibility.rst

Examples
--------

Member Configuration Document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To configure a secondary member as hidden, set its
:rsconf:`members[n].priority` value to ``0`` and
set its :rsconf:`members[n].hidden` value to
``true`` in its member configuration:

.. code-block:: javascript
   :emphasize-lines: 4-5

   {
     "_id" : <num>
     "host" : <hostname:port>,
     "priority" : 0,
     "hidden" : true
   }


Configuration Procedure
~~~~~~~~~~~~~~~~~~~~~~~

The following example hides the secondary member currently at the index
``0`` in the :rsconf:`members` array. To configure
a :term:`hidden member`, use the following sequence of operations in a
:program:`mongo` shell connected to the primary, specifying the member
to configure by its array index in the
:rsconf:`members` array:

.. code-block:: javascript

   cfg = rs.conf()
   cfg.members[0].priority = 0
   cfg.members[0].hidden = true
   rs.reconfig(cfg)

After re-configuring the set, this secondary member has a priority of
``0`` so that it cannot become primary and is hidden. The other members
in the set will not advertise the hidden member in the
:dbcommand:`isMaster` or :method:`db.isMaster()` output.

.. include:: /includes/fact-rs-conf-array-index.rst

.. include:: /includes/warning-rs-reconfig.rst

Further Reading
---------------

For more information about backing up MongoDB databases,
see :doc:`/core/backups`. To configure a hidden member, see
:doc:`/tutorial/configure-a-hidden-replica-set-member`.
